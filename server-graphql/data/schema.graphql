schema {
  query: RootQuery
  mutation: RootMutation
  subscription: RootSubscription
}

type Channel implements Node {
  # The ID of an object
  id: ID!
  name: String
  type: ChannelType
  users(after: String, first: Int, before: String, last: Int): UserConnection

  # Cette connection est toujours vide, utiliser la subscription messagesSubscribe pour obtenir son contenu
  messages(after: String, first: Int, before: String, last: Int): MessageConnection
}

# An edge in a connection.
type ChannelEdge {
  # The item at the end of the edge
  node: Channel

  # A cursor for use in pagination
  cursor: String!
}

enum ChannelType {
  CHANNEL
  GROUP
  CONVERSATION
}

input CreateChannelInput {
  name: String!
  type: ChannelType!
  clientMutationId: String
}

type CreateChannelPayload {
  channelEdge: ChannelEdge
  viewer: Viewer
  clientMutationId: String
}

type Message implements Node {
  # The ID of an object
  id: ID!
  uuid: String
  kind: MessageKind
  content: String
  author: User
  time: Float
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge
  node: Message

  # A cursor for use in pagination
  cursor: String!
}

enum MessageKind {
  TEXT
  FILE
}

input MessagesSubscribeInput {
  channel: String!
  clientSubscriptionId: String
}

type MessagesSubscribeMessage {
  messageEdge: MessageEdge
  channel: Channel
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

input PostMessageInput {
  channel: String!
  kind: MessageKind!
  content: String!
  clientMutationId: String
}

type PostMessagePayload {
  messageEdge: MessageEdge
  channel: Channel
  clientMutationId: String
}

type RootMutation {
  createChannel(input: CreateChannelInput!): CreateChannelPayload
  postMessage(input: PostMessageInput!): PostMessagePayload
}

type RootQuery {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

type RootSubscription {
  # Emet tous les messages d'un channel
  messagesSubscribe(input: MessagesSubscribeInput!): MessagesSubscribeMessage
}

type User implements Node {
  # The ID of an object
  id: ID!
  displayName: String
  photoURL: String
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type Viewer {
  # The ID of an object
  id: ID!

  # Obtiens une référence a un channel spécifique via son nom
  channel(name: String!): Channel
}
