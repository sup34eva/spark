schema {
  query: RootQuery
  mutation: RootMutation
  subscription: RootSubscription
}

type Channel implements Node {
  # The ID of an object
  id: ID!
  name: String
  messages(after: String, first: Int, before: String, last: Int): MessageConnection
}

# A connection to a list of items.
type ChannelConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ChannelEdge]
}

# An edge in a connection.
type ChannelEdge {
  # The item at the end of the edge
  node: Channel

  # A cursor for use in pagination
  cursor: String!
}

type Message implements Node {
  # The ID of an object
  id: ID!
  offset: Int
  value: String
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge
  node: Message

  # A cursor for use in pagination
  cursor: String!
}

input MessagesSubscribeInput {
  channel: String!
  clientSubscriptionId: String
}

type MessagesSubscribeMessage {
  messageEdge: MessageEdge
  channel: Channel
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

input PostMessageInput {
  channel: String!
  message: String!
  clientMutationId: String
}

type PostMessagePayload {
  messageEdge: MessageEdge
  channel: Channel
  clientMutationId: String
}

type RootMutation {
  postMessage(input: PostMessageInput!): PostMessagePayload
}

type RootQuery {
  channels(after: String, first: Int, before: String, last: Int): ChannelConnection
  channel(name: String!): Channel
}

type RootSubscription {
  messagesSubscribe(input: MessagesSubscribeInput!): MessagesSubscribeMessage
}
